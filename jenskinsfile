def info(str) {
    echo "\033[1;33m[Info]  "+str+"\033[0m"
}

def error(str) {
    echo "\033[1;31m[Error]  "+str+"\033[0m"
}

def success(str) {
    echo "\033[1;32m[Success]  "+str+"\033[0m"
}


pipeline {
    agent any
    options {
        ansiColor('xterm')
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    checkout([$class: 'GitSCM', branches: [[name: '*/master']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/bauson-com/laravel9']]])
                }
            }
        }
        stage('Verification') {
            steps {
                script {
                    sh encoding: 'UTF-8', label: 'Verify Files', returnStdout: false, script: 'pwd && ls -lah && cat entrypoint.sh'
                }
            }
        }

        stage('Build and Push Image') {
            steps {
                script {
                    sh encoding: 'UTF-8', label: 'Pull base Build Image', returnStdout: false, script: 'docker pull bauson/com:ubiphp81'
                    sh encoding: 'UTF-8', label: 'Build Image', returnStdout: false, script: 'docker build -t j6wdev/rel:demo . --no-cache'
                    sh encoding: 'UTF-8', label: 'Push Image to Dockerhub', script: 'docker push j6wdev/rel:demo'
                }
            }
        }

        stage('Deploy') {
            steps {
                withCredentials([
                string(credentialsId: 'DEPLOY_TOKEN', variable: 'DEVTLS'), 
                usernamePassword(credentialsId: 'DOCKER', passwordVariable: 'DOCKER_PASS', usernameVariable: 'DOCKER_USER')]) {
                    sh label: 'Docker login', script: 'docker $DEVTLS login -u "$DOCKER_USER" -p "$DOCKER_PASS"'
                    sh label: 'Image Pull', script: 'docker $DEVTLS pull j6wdev/rel:demo'
                    //sh label: 'Deploy Image', script: 'docker $DEVTLS service create --name service_demo j6wdev/rel:demo' // Initial deploy for devops
                    sh label: 'Deploy Image', script: 'docker $DEVTLS service update --force --update-parallelism 1 --update-delay 10s service_demo'
                    sh label: 'Get Containers', script: 'docker $DEVTLS ps | grep service_demo'
                }
            }
        }

    }

    
    post {

        cleanup {
            deleteDir()
        }
    }
}
